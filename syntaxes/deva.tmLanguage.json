{
  "name": "Devalang",
  "scopeName": "source.deva",
  "patterns": [
    {
      "name": "comment.line.number-sign.devalang",
      "match": "#.*$"
    },
    {
      "name": "keyword.control.devalang",
      "match": "@(import|export|load)"
    },
    {
      "name": "keyword.declaration.devalang",
      "match": "\\blet\\b"
    },
    {
      "match": "\\bas\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
      "captures": {
        "0": {
          "name": "keyword.other.as.devalang"
        },
        "1": {
          "name": "entity.name.function.devalang"
        }
      }
    },
    {
      "name": "keyword.control.devalang",
      "match": "\\b(bpm|bank|loop|group|call|spawn|synth)\\b"
    },
    {
      "name": "entity.name.function.devalang",
      "match": "\\.[a-zA-Z_][a-zA-Z0-9_]*"
    },
    {
      "name": "constant.language.synthtype.devalang",
      "match": "\\b(sine|square|saw|triangle|noise)\\b"
    },
    {
      "name": "variable.parameter.devalang",
      "match": "\\b(duration|default_bank|params|loopCount|tempo)\\b"
    },
    {
      "name": "variable.other.devalang",
      "match": "\\b(?<=\\bgroup\\s|\\bcall\\s|@export\\s*\\{\\s*|@import\\s*\\{\\s*|,)\\s*[a-zA-Z_][a-zA-Z0-9_]*\\b"
    },
    {
      "name": "constant.numeric.devalang",
      "match": "\\b\\d+(\\.\\d+)?\\b"
    },
    {
      "name": "string.quoted.double.devalang",
      "begin": "\"",
      "end": "\""
    },
    {
      "match": "\\b(if|else if|else)\\b",
      "name": "keyword.control.flow.devalang"
    },
    {
      "begin": "\\b(if|else if)\\b\\s+",
      "beginCaptures": {
        "1": { "name": "keyword.control.flow.devalang" }
      },
      "end": ":",
      "name": "meta.condition.devalang",
      "patterns": [
        { "match": "[a-zA-Z0-9_><=!\\s]+" }
      ]
    },
    {
      "name": "meta.object.devalang",
      "begin": "\\{",
      "end": "\\}",
      "patterns": [
        {
          "name": "variable.other.object.key.devalang",
          "match": "[a-zA-Z_][a-zA-Z0-9_]*"
        },
        {
          "name": "constant.numeric.devalang",
          "match": "\\b\\d+(\\.\\d+)?\\b"
        }
      ]
    },
    {
      "name": "meta.arrow-call.devalang",
      "begin": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*->\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
      "beginCaptures": {
        "1": { "name": "variable.other.readwrite.devalang" },
        "2": { "name": "support.function.devalang" }
      },
      "end": "\\)",
      "patterns": [
        {
          "name": "constant.language.pitch.devalang",
          "match": "\\b[A-G](#|b)?[0-9]\\b"
        },
        {
          "include": "#devalang_object"
        },
        {
          "name": "constant.numeric.devalang",
          "match": "\\b\\d+(\\.\\d+)?\\b"
        },
        {
          "name": "variable.other.devalang",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    }
  ],
  "repository": {
    "devalang_object": {
      "patterns": [
        {
          "name": "variable.other.object.key.devalang",
          "match": "[a-zA-Z_][a-zA-Z0-9_]*"
        },
        {
          "name": "constant.numeric.devalang",
          "match": "\\b\\d+(\\.\\d+)?\\b"
        }
      ]
    }
  }
}
